{
  "hash": "cffd617f73fb753f692e9bb760b3d17a",
  "result": {
    "markdown": "---\ntitle: \"1.6 — Income & Substitution Effects — Class Content\"\nexecute:\n  freeze: auto\n\n---\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-note appearance=minimal}\n# Meeting Date\n*Monday, February 14, 2023*\n:::\n\n::: callout-warning\n# Upcoming Assignment\n[Problem Set 1](/assignments/01-problem-set) (on classes 1.1-1.4) is due by 11:59 PM Monday February 13 on Blackboard Assignments.\n:::\n\n## <i class=\"fas fa-info-circle fa-lg\"></i> Overview\n\nToday we cover the third effect in the individual demand function: the (own) price effect, aka the **law of demand**: how changes in a good's (own) price affect quantity demanded for that good. \n\nWe introduce the idea of (simplified, own-price) demand functions, inverse demand functions, and a demand curve. I will also show you examples of how we derive demand functions and curves.\n\nThe other major concept today is breaking apart the law of demand into two effects: the **(real) income effect**, and the **substitution effect**. We considering them conceptually and graphically. These can be a difficult concept for students to grasp.\n\n## <i class=\"fas fa-book-reader fa-lg\"></i> Readings\n\n- <i class=\"fas fa-book\"></i> Ch. 2.2, 5.3, in Goolsbee, Levitt, and Syverson, 2019\n\n## Interactive Examples\n\n- [Visualizing the Consumer's Problem](https://ryansafner.shinyapps.io/Consumer/)\n- [Visualizing Changes in the Consumer's Problem](https://ryansafner.shinyapps.io/Consumer_changes/)\n- [Visualizing Demand Shifters](https://ryansafner.shinyapps.io/Demand/)\n\nThese are examples that I wrote in R/Shiny in the past, to visualize what it is we are looking at. As I find more time, I will update these and integrate them into our slides, but until then, I will just post links. \n\nThe first is a visual example of the static (one-time) Consumer's problem. You can adjust things about the (Cobb-Douglas) utility function, income, and prices, and see how it would affect the graph and the optimum.\n\nThe second is a visual example of dynamic changes in the Consumer's problem. The consumer starts at a pre-defined optimum. You can adjust any of the budget constraint parameters $(m, p_x, p_y)$, and see how it would affect a new optimum, which you can *compare* the the original optimum.\n\nThe third is a visual example of a hypothetical demand function for beer, with preference intensity, income, price of nachos (a complement), and price of wine (a substitute) as inputs to the function. Based on some pre-defined functions (in the background), you can change any of the inputs and see how it would affect the (inverse) demand function, expressed as a simple demand curve. \n\nI hope some time to clean these up and make a few more, such as \"Visualizing the Income and Substitution Effects\" and \"Estimating a Demand Function from Real World Data.\"\n\n## <i class=\"fas fa-laptop-code\"></i> Assignments\n\n### Problem Set 1 Due Monday February 13\n\n[Problem Set 1](/assignments/01-problem-set) (on classes 1.1-1.4) is due by 11:59 PM Monday February 13 on Blackboard Assignments.\n\n## <i class=\"fas fa-chalkboard-teacher\"></i> Slides\n\nBelow, you can find the slides in two formats. Clicking the image will bring you to the html version of the slides in a new tab. The lower button will allow you to download a PDF version of the slides. \n\n::: callout-tip\nYou can type <kbd>h</kbd> to see a special list of viewing options, and type <kbd>o</kbd> for an outline view of all the slides.\n:::\n\nI suggest printing the slides beforehand and using them to take additional notes in class (*not everything* is in the slides)!\n\n\n<p style=\"text-align:center;\"><a target=\"_blank\" href=\"/slides/1.6-slides.html\"><img src =\"/slides/1.6-slides.png\" alt = \"1.6-slides\"></a></p>\n<p style=\"text-align:center;\"><a class=\"btn btn-primary btn-lg\" target=\"_blank\" href=\"/slides/1.6-slides.pdf\"><i class=\"fas fa-file-pdf\"></i> Download as PDF</a></p>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}